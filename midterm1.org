#+TITLE: CS250 Midterm 1 Review
#+AUTHOR: Theo Park
#+OPTIONS: toc:2

* Why Computer Architecture

** Definitions

- /Computer/ is a machine that can be programmed to *carry out computation automatically*
- /Architecture/ is a *conceiving, planning, and designing structures*
  + CA has purpose only when given SW
- /Software/ is a *description of a computation* expressed in a programming language, any data, and documentation
  + Purpose 1: Definining an DS & A
  + Purpose 2: Executing
- /Interpreter/ *executes software*
  + Directly executes instructions expressed in a PL
  + *Does NOT rely on "Turtles all the way down"* (interpreter for interpreter for interpreter...) approach
- /Compiling/ is the process of *traslating* programs written in one *HLL* (High-level language) into a *LLL* that *has a machine interpreter*
  
** C Compiling Process

// TODO Find a better way to put diagram in Org files
#+begin_src
source_code -> preprocessor -> preprocessed source code -> compiler -> assembly code -> assembler -> relocatable object code -> linker (w/ object code in lib) -> binary object code
#+end_src

- Preprocessed Source Code: Does not contain *comments, macros, includes*, etc 
- Assembly Code: *Machine specific*

** Mechanical Computers

- Antikythera Mechanism (200B.C): Count Olumpics days
- Charles Babbage (1849)

*** Disadvantages

- Parts are small, require individual assembly
- Part shape and size determine computational function
- Parts cause waer and accuracy degrades over time
- Algorithm are slow

** Vacuum Tube Computers

- Colossus

*** Disadvantages

- About the same volume as mechanical computer
- Uses a lot of electrical energy
- Vacuum tubes burn out

** Transistor

- First one built at AT&T Bell Labs
- Used to use germanium crystal, now use silicon
- Futures are graphene or single layer of carbon

** Two Architectures

*** Harvard Architecture

*Separate memories* for instructions and data

*** Von Neumann Architecture

*Single memory* for instruction and data

* Representation

** Electrical Representation of Bits

- *V (max) voltage V - $\Delta$* is recognizes as 1
- *0 to 0 + $\delta$* is recognizes as 0
- *Rising edge* and *falling edge* are ignored

** Bit String

- *Bus: Collection of k wires carrying k-bits*
- *k-bits* on *k-wires*
- k-bits can represent up to *$2^k$ values*
- /Bit strings are only meaningful when it is paried with a representation/

* Regular Representations

Unsigned and 2's complement integers are native data types for most modern circuits

** Unsigned integer, base 2, weighted positional

*Regular binary number* that we think of normally.

~001011~ = $0 \times 2^5 + 0 \times 2^4 + 1 \times 2^3 + 0 \times 2^2 + 1 \times 2^1 + 1 \times 2^0 = 11$

** Sign Magnitude

*UIB2WP but the MSB is the sign* (MSP = left most bit).

~101011~ = $-1(0 \times 2^4 + 1 \times 2^3 + 0 \times 2^2 + 1 \times 2^1 + 1 \times 2^0) = -11$

*** Characteristics of sign magnitude

- There are two zeros (0000 = +0, 1000 = -0)
- Less number can be represented (duh)

** Two's Complement

*MSB weight is negative*

~101011~ = $-(1 \times 2^4) + 1 \times 2^3 + 0 \times 2^2 + 1 \times 2^1 + 1 \times 2^0) = -5$

*** Characteristics of two's complement

- Only one bit string for zero
- *Invert bit string and add 1 to get the negative*
- *Uses the same circuit as unsigned integer add/subtraction*

* Casting/Sign Extension

- Unsigned integer: *Add 0 in front*
- 2's complement: *Add MSB in front*

* Overflow

- Adding two k-bit unsigned integer resulting in (k+1)-bit result
- $A +_k B = (A+B) \text{ mod } k$ prevents it

* Gray Code

For sensors where bits need to be detected fast, "gray code" where only one bit changes per number is used.

* ASCII

** History

/Baudot Code/ in 1870 used to represent $2^5$ characters with 5 keys.

*** Design of ASCII

- *Designed for machine, not human*
- Alphabetic order = integer order of chracter codes
- Upper and lower case only differ in *bit 7, the MSB*

*** Unicode

- Up to 4 bytes per character
- Currently 14.0, supports emoji

* Order of Bytes in Memory

- /Big Endian/: *MSB comes first*
  ~0x5060~ is stored as ~0x5060~
- /Lil Endian/: *LSB comes first*
  ~0x5060~ is stored as ~0x6050~

* Floating Point Representation (IEEE 754)

~|S| Exponent | mantissa |~

** Exponent

Exponent is a biased integer. The initial range is -127 < e < 127, sign is made implicit by E = e + Bias = e + 127.

** Mantissa

Unless the number is 0, the MSB of the mantissa must be 1 -> No need to store! (*hidden bit*).
Instead, *one extra precision bit* is stored in the end.

** Runtime Anomalies

1. /E = 0, Mantissa = 0,/: $\pm 0$, depending on the sign bit
2. /E = 0, Mantissa $\neq$ 0, Mantissa MSB = 0/: De-normalized number, gradual underflow
3. /E = 255, Mantissa = 0/: $\pm \infty$; in general, overflow is set to infinity to help people
4. /E = 255, Mantissa $\neq$ 0/: Not a Number


* Memory

** Pointing Function

#+CAPTION: Abstract Pointing Function Diagram
#+NAME:   Abstract Pointing Function Diagram by Prof. George B. Adams III
[[./img/pointing_function.jpg]]

Memory chips are 2D, $2^{k/2} \times 2^{k/2}$ grid creates $2^k$ intersections -> Only $2 * 2^{k/2}$ wires needed! Optimized design can reduce number of wires by $\sqrt{2^k} / 2$

** Register

k-bit register has k latches to store $2^k$ bit strings.

* Pointing

** Decoder

A circuit with n wires input and 2^n wires output. Decoding output is selected or not_selected

| X | Y | D0 | D1 | D2 | D3 |
|---+---+----+----+----+----|
| 0 | 0 |  1 |  0 |  0 |  0 |
| 1 | 0 |  0 |  1 |  0 |  0 |
| 0 | 1 |  0 |  0 |  1 |  0 |
| 1 | 1 |  0 |  0 |  0 |  1 |

2-to-4 decoder truth table. *n inputs and 2^n outputs*.

** Selecting bus

- /Bus/: Group of n wires, carry n bit
- /Multiplexer (mux)/: Selects *from 2^n k-bit input buses, outputs to 1 k-bit output bus*
- /Demultiplexer (Demux)/: Reverse of mux
